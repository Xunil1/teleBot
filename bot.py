import requests
import telebot
import config
from telebot import types



order = {}
bot = telebot.TeleBot(config.TOKEN)

state = {}
questions = {
    "name": "–í–∞—à–µ –∏–º—è?",
    "address": "–ù–∞ –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
    "phone": "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏?",
    "comment": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:",
    "deposit": "–ß—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç–µ –≤ –∑–∞–ª–æ–≥: –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ 100$?",
    "order_el": ["–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—à—É?", "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—à—É —á—Ç–æ-—Ç–æ –µ—â–µ?"]
    }

keys = ["name", "address", "phone", "comment", "deposit", "order_el", "order_price", "messenger"]
keys_on_rus = {
    "name": "–ò–º—è",
    "address": "–ê–¥—Ä–µ—Å",
    "phone": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    "comment": "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π",
    "deposit": "–ó–∞–ª–æ–≥",
    "order_el": "–ó–∞–∫–∞–∑"
    }

order_price = {}


def create_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶")

    markup.add(item1, item2)
    return markup


def create_keyboard_products():
    products = get_product()
    items = []
    for el in products:
        items.append(types.InlineKeyboardButton(products[el]["name"], callback_data=products[el]["name"]))
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(*items)
    return markup


@bot.message_handler(commands=['start'])
def welcome(message):
    global state
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É –∫–∞–ª—å—è–Ω–æ–≤ –Ω–∞ –¥–æ–º. –ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ —Ç—ã –º–æ–∂–µ—à—å —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª—å—è–Ω –Ω–∞ –Ω—É–∂–Ω–æ–µ —Ç–µ–±–µ –≤—Ä–µ–º—è!",
                     parse_mode='html',
                     reply_markup=create_keyboard())
    state[message.chat.id] = "default"


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id,
                     '–í–∏–∂—É —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—è –ø–æ–º–æ—â—å!\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ"')


@bot.message_handler(content_types=['text'])
def main_send(message):
    global state
    global order
    global order_price
    try:
        if state[message.chat.id] == "default":
            if message.chat.type == 'private':
                if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ':
                    state[message.chat.id] = "ordering"
                    order[message.chat.id] = {
                        "name": "",
                        "address": "",
                        "phone": "",
                        "comment": "",
                        "deposit": "",
                        "order_el": [],
                        "messenger": "",
                        "order_price": 30
                    }
                    order[message.chat.id]["messenger"] = "@" + message.chat.username
                    order_price[message.chat.id] = 0
                    bot.send_message(message.chat.id, questions["name"], reply_markup=types.ReplyKeyboardRemove())

                elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶':
                    products = get_product()
                    message_products = ''
                    k = 1
                    for el in products:
                        message_products += str(k) + ") " + products[el]["name"] + "\n"
                        k += 1
                    bot.send_message(message.chat.id,
                                     '–£ –Ω–∞—Å —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:\n\n' + message_products + '\n–°–∫–æ—Ä–µ–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ"')
                else:
                    bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å /help')
        else:
            if order[message.chat.id]["name"] == "":
                order[message.chat.id]["name"] = message.text
                bot.send_message(message.chat.id, questions["address"])
            elif order[message.chat.id]["address"] == "":
                order[message.chat.id]["address"] = message.text
                bot.send_message(message.chat.id, questions["phone"])
            elif order[message.chat.id]["phone"] == "":
                order[message.chat.id]["phone"] = message.text
                bot.send_message(message.chat.id, questions["comment"])
            elif order[message.chat.id]["comment"] == "":
                order[message.chat.id]["comment"] = message.text
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–ü–∞—Å–ø–æ—Ä—Ç üìï", callback_data="–ø–∞—Å–ø–æ—Ä—Ç")
                item2 = types.InlineKeyboardButton("100$ üíµ", callback_data="100$")
                markup.add(item1, item2)
                bot.send_message(message.chat.id, questions["deposit"], reply_markup=markup)
            elif order[message.chat.id]["deposit"] == "":
                if message.text in ["–ø–∞—Å–ø–æ—Ä—Ç", "100$"]:
                    order[message.chat.id]["deposit"] = message.text
                    bot.send_message(message.chat.id, questions["order_el"][0], reply_markup=create_keyboard_products())
                else:
                    bot.send_message(message.chat.id, "–î–ª—è –ª—É—á—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º)")
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("–ü–∞—Å–ø–æ—Ä—Ç üìï", callback_data="–ø–∞—Å–ø–æ—Ä—Ç")
                    item2 = types.InlineKeyboardButton("100$ üíµ", callback_data="100$")
                    markup.add(item1, item2)
                    bot.send_message(message.chat.id, questions["deposit"], reply_markup=markup)
            elif state[message.chat.id] == "make_choice":
                bot.send_message(message.chat.id, "–î–ª—è –ª—É—á—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º)")
                bot.send_message(message.chat.id, questions["order_el"][0], reply_markup=create_keyboard_products())
    except:
        bot.send_message(message.chat.id, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global state
    products = get_product()
    products_list = []
    for el in products:
        products_list.append(products[el]["name"])
    try:
        if call.message:
            if call.data == "–ø–∞—Å–ø–æ—Ä—Ç" or call.data == "100$":
                order[call.message.chat.id]["deposit"] = call.data
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text, reply_markup=None)
                bot.send_message(call.message.chat.id, "–í –∑–∞–ª–æ–≥ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω: " + call.data)
                bot.send_message(call.message.chat.id, questions["order_el"][0], reply_markup=create_keyboard_products())
                state[call.message.chat.id] = "make_choice"

            elif call.data in products_list:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.data + " –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—à—É.", reply_markup=None)

                flag = True
                for el in order[call.message.chat.id]["order_el"]:
                    if call.data == el[:el.index("√ó")-1]:
                        order[call.message.chat.id]["order_el"][order[call.message.chat.id]["order_el"].index(el)] = el[:el.index("√ó") + 1] + str(int(el[el.index("√ó")+1:]) + 1)
                        flag = False
                if flag:
                    order[call.message.chat.id]["order_el"].append(call.data + " √ó1")

                item1 = types.InlineKeyboardButton("–î–∞", callback_data="yes")
                item2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no")
                markup = types.InlineKeyboardMarkup(row_width=2)
                markup.add(item1, item2)
                bot.send_message(call.message.chat.id, questions["order_el"][1], reply_markup=markup)

            elif call.data == "yes" or call.data == "no":
                if call.data == "yes":
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–î–æ–±–∞–≤–∏–º –µ—â–µ.", reply_markup=None)
                    bot.send_message(call.message.chat.id, questions["order_el"][0], reply_markup=create_keyboard_products())
                else:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ —Å–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞)", reply_markup=None)
                    message_for_user = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"

                    for el in keys_on_rus:
                        if el != "order_el":
                            message_for_user += keys_on_rus[el] + ": " + order[call.message.chat.id][el] + "\n"

                    order_message = ''
                    for_order = ''
                    for el in order[call.message.chat.id]["order_el"]:
                        order_message += "     " + el + "\n"
                        for_order += el + "; "

                    order[call.message.chat.id]["order_el"] = for_order

                    message_for_user += keys_on_rus["order_el"] + ": \n" + order_message + "\n"

                    state[call.message.chat.id] = "default"

                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm")
                    item2 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel")

                    markup.add(item1, item2)

                    bot.send_message(call.message.chat.id, message_for_user, reply_markup=markup)
            elif call.data == "confirm" or call.data == "cancel":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text, reply_markup=None)
                if call.data == "confirm":
                    if send_order(order[call.message.chat.id]):
                        bot.send_message(call.message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=create_keyboard())
                    else:
                        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∑–∞–∫–∞–∑–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.", reply_markup=create_keyboard())
                    state[call.message.chat.id] = "default"
                    order.pop(call.message.chat.id, None)
                else:
                    bot.send_message(call.message.chat.id, "–ù–∞—á–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–Ω–æ–≤–æ!", reply_markup=create_keyboard())
    except Exception as e:
        print(repr(e))


def get_product():
    products = requests.get("https://hookah-batumi.herokuapp.com/set_products").json()
    return products


def send_order(order):
    response = requests.post("https://hookah-batumi.herokuapp.com/set_order", json=order)
    return bool(response)


bot.polling(none_stop=True)